- @articles_for_main_column = Article.published unless @articles_for_main_column
- if section.section_format != "full"
  - accs = section.article_categories
  - categories = []
  - for category in accs
    - categories << category.id
  - count = ColumnSectionType.find_by_partial_name("articles_for_side_column").default_count if count.blank?
  - ops = "person_id = #{@page.author_id}" if @page.author_id
  - if @page.article_category_id.nil?
    - if section.show_all_categories == true
      - articles = @articles_for_main_column.uniq[0..count-1]
    - else
      - articles = @articles_for_main_column.reject{|a| !(a.article_category_ids.any? {|ac| categories.include?(ac)} or categories.include?(a.article_category_id))}[0..count-1]
  - else
    - articles = @page.article_category.articles.published.find(:all, :conditions => ops, :limit => count)

  .slice.articles-for-main-column{:id => "section-#{section.id}"}
    - unless section.title.blank?
      %h2= section.title
    %ul.recent_articles.list_of_links
      - for article in articles
        %li
          %h3= link_to article.title, article_path(article)
          %span.date
            = "by #{article.person.name} - " if section.show_author
            = article.published_at.strftime("%a, %b %d, %Y")
          - if section.show_blurb
            %p= article.description.blank? ? article.blurb : truncate(h(article.description), :length => 100)
          = clear
          
- else
  - accs = section.article_categories
  - categories = []
  - for category in accs
    - categories << category.id
  - count = ColumnSectionType.find_by_partial_name("articles_for_side_column").default_count if count.blank?
  - ops = "person_id = #{@page.author_id}" if @page.author_id
  - found_articles = []
  - if @page.article_category_id.nil?
    - if section.show_all_categories == true
      - found_articles = @articles_for_main_column
    - else
      - found_articles = @articles_for_main_column.reject{|a| !(a.article_category_ids.any? {|ac| categories.include?(ac)} or categories.include?(a.article_category_id))}
  - else
    - articles = @page.article_category.articles.published.find(:all, :conditions => ops).uniq
  - unless found_articles.empty?
    - articles = found_articles.paginate(:page => params[:page], :per_page => section.count, :include => :article_categories)
  
    - template = Liquid::Template.parse(@tmplate.articles_index)
    .slice{:id => "section-#{section.id}"}
      = template.render( 'articles' => articles, 'tag' => params[:tag], 'author' => (@author ? @author.name : nil), 'month' => (params[:month] ? "#{month_name(params[:month].to_i)} #{params[:year]}" : nil), 'blog_title' => section.title, 'articles_list' => (render :partial => "articles/article_for_list", :collection => articles) )


    - content_for :head do
      = "<link rel=\"alternate\" type=\"application/rss+xml\" title=\"#{@cms_config['website']['name']}\" href=\"/#{path_safe(@cms_config['site_settings']['article_title'])}.rss\" />"


