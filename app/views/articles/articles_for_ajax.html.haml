- @articles_for_main_column = Article.all(:all, :conditions => ["(published_at <= ? and published = ?) or publish_immediately = ?", Time.now, true, true]) unless @articles_for_main_column
- section = ColumnSection.find(params[:section_id])
- count = section.count
- accs = section.article_categories
- categories = []
- for category in accs
  - categories << category.id
- count = ColumnSectionType.find_by_partial_name("articles_for_side_column").default_count if count.blank?
- if section.show_all_categories == true
  - found_articles = @articles_for_main_column[0..count-1]
- else
  / - for category in categories
  /   - ac = ArticleCategory.find(category)
  /   - if found_articles
  /     - found_articles << ac.articles[0..count-1]
  /   - else
  /     - found_articles = ac.articles[0..count-1]
  - found_articles = @articles_for_main_column.reject{|a| (a.article_category_ids & categories).empty?}.uniq[0..count-1]#{|a| !(a.article_category_ids.any? {|ac| categories.include?(ac)})}
- unless found_articles.empty?
  - articles = found_articles

  - template = Liquid::Template.parse(@tmplate.articles_index)
  .slice{:id => "section-#{section.id}"}
    = template.render( 'articles' => articles, 'tag' => params[:tag], 'author' => (@author ? @author.name : nil), 'month' => (params[:month] ? "#{month_name(params[:month].to_i)} #{params[:year]}" : nil), 'blog_title' => section.title, 'articles_list' => (render :partial => "articles/article_for_list", :collection => articles) )